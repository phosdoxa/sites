// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------

/// Regular font family
/// @type List
$text-font-stack: "Josefin Sans", "Open Sans", "Helvetica Neue Light",
  "Helvetica Neue", "Helvetica", "Arial", sans-serif !default;

/// Code (monospace) font family
/// @type List
$code-font-stack: "Courier New", "DejaVu Sans Mono", "Bitstream Vera Sans Mono",
  "Monaco", monospace !default;

/// Font weight
$light: 300;
$medium: 400;
$bold: 600;

/// Copy text color
/// @type Color
$text-color: rgb(34, 34, 34) !default;

/// Main brand color
/// @type Color
$brand-color: rgb(229, 0, 80) !default;

/// Light grey
/// @type Color
$light-grey: rgb(237, 237, 237) !default;

/// Medium grey
/// @type Color
$mid-grey: rgb(153, 153, 153) !default;

/// Dark grey
/// @type Color
$dark-grey: rgb(68, 68, 68) !default;

/// Desaturated Red
/// @type Color
$paragraph-color: hsl(0, 36%, 70%);

/// Dark Grayish Red
/// @type Color
$heading-color: hsl(0, 6%, 24%);

/// Soft Red
/// @type Color
$input-warning-color: hsl(0, 93%, 68%);

/// Body's background linear gradient
/// @type Color
$body-bg-start: hsl(0, 0%, 100%);

/// Body's background linear gradient
/// @type Color
$body-bg-end: hsl(0, 100%, 98%);

/// Button's background linear gradient
/// @type Color
$button-bg-start: hsl(0, 80%, 86%);

/// Button's background linear gradient
/// @type Color
$button-bg-end: hsl(0, 74%, 74%);

/// Container's maximum width
/// @type Length
$max-width: 1180px !default;

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
  "small": (
    min-width: 320px
  ),
  "medium": (
    min-width: 768px
  ),
  "large": (
    min-width: 1024px
  ),
  "extraLarge": (
    min-width: 1440px
  )
) !default;

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == "string",
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Relative or absolute URL where all assets are served from
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: "https://tdphut.github.io/sites/base-apparel-coming-soon/" !default;
